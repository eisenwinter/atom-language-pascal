'.source.pascal':
  'array declaration (var)':
    'prefix': 'arrayd'
    'body': 'ARRAY[0..${1:size}] OF $0'
  'array declaration (const)':
    'prefix': 'arrayc'
    'body': 'ARRAY[0..${1:size}] OF = ($0)'
  'begin … end':
    'prefix': 'begin'
    'body': """
      BEGIN
      \t$0
      END;
    """
  'case … end':
    'prefix': 'CASE'
    'body': """
      CASE ${1:true} OF
      \t$0
      END; (* /case *)
    """
  'case … (with else)':
    'prefix': 'casee'
    'body': """
      CASE ${1:true} OF
      \t${2:value}: ${3:statement}
      ELSE
        $0
      END;
    """
  'class (no parts)':
    'prefix': 'classd'
    'body': """
      T${1:ClassName} = CLASS(T${2:ancestor})
      \t$0
      END;
    """
  'class (with Create/Destroy)':
    'prefix': 'classc'
    'body': """
      T${1:ClassName} = CLASS(T${2:ancestor})
      PRIVATE
      \t$0
      PROTECTED
      \t
      public
      \tCONSTRUCTOR Create; override;
      \tDESTRUCTOR Destroy; override;
      PUBLISH
      \t
      END;
    """
  'class full (commented)':
    'prefix': 'classfc'
    'body': """
      T${1:ClassName} = CLASS(T${2:ancestor})
      PRIVATE
      \t{ private declarations }
      \t$0
      PROTECTED
      \t{ protected declarations }
      \t
      PUBLIC
      \t{ public declarations }
      \t
      PUBLISHED
      \t{ published declarations }
      \t
      end;
    """
  'class full (uncommented)':
    'prefix': 'classfu'
    'body': """
      T${1:ClassName} = class(T${2:ancestor})
      private
      \t$0
      protected
      \t
      public
      \t
      published
      \t
      end;
    """
  'constructor descendant':
    'prefix': 'CreateC'
    'body': 'constructor Create(AOwner: TComponent); override;'
  'constructor':
    'prefix': 'constructorc'
    'body': 'constructor Create(${1:params}); ${2:override;}'
  'constructor … destructor':
    'prefix': 'constructord'
    'body': """
      constructor Create(${1:params});
      destructor Destroy; override;$0
    """
  'destructor':
    'prefix': 'destructor'
    'body': 'destructor Destroy; override;$0'
  'else … end':
    'prefix': 'else'
    'body': """
      ELSE BEGIN
      \t$0
      END; (* /else *)
    """
  'enum':
    'prefix': 'enum'
    'body': 'T${1:EnumName} = (${2:meOne}, $0);'
  'for … begin end':
    'prefix': 'forb'
    'body': """
      FOR ${1:i} := ${2:0} TO ${3:max} DO BEGIN
      \t$0
      END; (* /for *)
    """
  'for in … end':
    'prefix': 'forin'
    'body': """
      FOR ${1:MyElem} IN ${2:MyList} DO BEGIN
      \t$0
      END; (* /for *)
    """
  'for downto … end':
    'prefix': 'forr'
    'body': """
      FOR ${1:i} := ${2:max} DOWNTO ${3:0} DO BEGIN
      \t$0
      END; (* /for *)
    """
  'for … (no begin end)':
    'prefix': 'for'
    'body': """
      FOR ${1:i} := ${2:0} TO ${3:max} DO
      \t$0
    """
  'function … end':
    'prefix': 'function'
    'body': """
      FUNCTION ${1:MyFunction}(${2:params}) : ${3:returns};
      BEGIN
      \t$0
      END; (* /${1} *)
    """
  'if … (no begin end)':
    'prefix': 'if'
    'body': """
      IF ${1:True} THEN
      \t$0
    """
  'if … end':
    'prefix': 'ifb'
    'body': """
      IF ${1:True} THEN BEGIN
      \t$0
      END; (* / if *)
    """
  'if … else (no begin end)':
    'prefix': 'ife'
    'body': """
      IF ${1:True} THEN
      \t${2:then code here}
      ELSE
      \t${3:else code here}
    """
  'if … else end':
    'prefix': 'ifeb'
    'body': """
      IF ${1:True} THEN BEGIN
      \t${2:then code here}
      END (* /if *)
      ELSE BEGIN
      \t${3:else code here}
      END; (* /else *)
    """
  'if not Assigned … (no begin end)':
    'prefix': 'ifnass'
    'body': """
      IF NOT Assigned(${1:variable}) THEN
      \t${1:variable} := T${2:ClassName}.Create(${3:params});$0
    """
  'if nil … (no begin end)':
    'prefix': 'ifnil'
    'body': """
      IF ${1:variable} = NIL THEN
      \t${1:variable} := T${2:ClassName}.Create(${3:params});$0
    """
  'interface declaration':
    'prefix': 'interface'
    'body': """
      I${1:InterfaceName}: INTERFACE(${2:ancestor})
      \t${3:[GUID]}
      \t$0
      end;
    """
  'procedure':
    'prefix': 'procedure'
    'body': """
      PROCEDURE ${1:MyProcedure}(${2:params});
      BEGIN
      \t$0
      END; (* /${1} *)
    """
  'property getter':
    'prefix': 'prop'
    'body': 'PROPERTY ${1:name}: ${2:type} read ${3:getter} write ${4:setter};$0'
  'property field':
    'prefix': 'propf'
    'body': 'PROPERTY ${1:name}: ${2:type} read F${1:name} write F${1:name};$0'
  'property get set':
    'prefix': 'propgs'
    'body': 'PROPERTY ${1:name}: ${2:type} read Get${1:name} write Set${1:name};$0'
  'property read only':
    'prefix': 'propro'
    'body': 'PROPERTY ${1:name}: ${2:type} read ${3:getter};$0'
  'property read only field':
    'prefix': 'proprof'
    'body': 'PROPERTY ${1:name}: ${2:type} read F${1:name};$0'
  'raise':
    'prefix': 'raise'
    'body': 'RAISE ${1:Exception}.Create(\'${2:Error Message}\');$0'
  'region':
    'prefix': 'region'
    'body': """
      {$REGION \'${1:MyRegion}\'}
      \t$0
      {$ENDREGION}'
    """
  'repeat until':
    'prefix': 'repeat'
    'body': """
      REPEAT
      \t$0
      UNTIL (${1:True});
    """
  'set declaration':
    'prefix': 'set'
    'body': 'T${1:SetName = set of $0};'
  'try object … finally':
    'prefix': 'try'
    'body': """
      ${1:variable} := ${2:TComponent}.Create(${3:params});
      TRY
      \t$0
      FINALLY
      \t${1:variable}
      END; (* /try *)
    """
  'try … finally':
    'prefix': 'tryf'
    'body': """
      TRY
      \t$0
      FINALLY
      \t$1
      END; (* /try *)
    """
  'try … except':
    'prefix': 'trye'
    'body': """
      try
      \t$0
      except
      \ton ${1:e}: ${2:Exception} do
      end;
    """
  'variable':
    'prefix': 'VAR'
    'body': '${1:variable}: ${2:type};$0'
  'unit … implementation … end':
    'prefix': 'unitb'
    'body': """
      {
        ${1}
        @author(Name <x@y.at>)
        @abstract(a short description)
        @created(2017-03-06)
        a large description
        @lastmod(2017-03-06)
      }
      UNIT ${1:unit_name};

      INTERFACE

      IMPLEMENTATION

      $0

      END.
    """
  'program … end':
    'prefix': 'programb'
    'body': """
      {
        ${1}
        @author(Name <x@y.at>)
        @abstract(a short description)
        @created(2017-03-06)
        a large description
        @lastmod(2017-03-06)
      }
      PROGRAM ${1:program_name};

      $0

      BEGIN
      END.
    """
  'while statement':
    'prefix': 'whileb'
    'body': """
      WHILE ${1:statement} DO BEGIN
      \t$0
      END; (* /while *)
    """
  'while not EOF':
    'prefix': 'whileneof'
    'body': """
      ${1:dataset}.First;
      WHILE NOT ${1:dataset}.EOF DO BEGIN
      \t$0
      \t${1:dataset}.Next;
      END;
    """
  'while (no begin end)':
    'prefix': 'while'
    'body': """
      WHILE ${1:statement} DO
      \t$0;
    """
  'pointer to record':
    'prefix': 'ptrrec'
    'body': """
      ${1:RecordName}Ptr = ^${1}
      ${1} = RECORD
        \t$0;
      END;
    """
  '(pasdoc) function':
    'prefix': 'docfunc'
    'body': """
      {
      does something
      @param(some parameter)
      @returns(something)
      }
    """
  '(pasdoc) procedure':
    'prefix': 'docproc'
    'body': """
      {
      does something
      @param(a parameter)
      }
    """
  '(pasdoc) record':
    'prefix': 'docrec'
    'body': """
      {
      record description
      @member name explanation
      @member next prolly a nil pointer
      }
    """
