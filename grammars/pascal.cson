'fileTypes': [
  'pas'
  'p'
  'pp'
  'dpk'
  'dpr'
  'dti'
  'pkg'
  'dfm'
  'lpr'
  'lfm'
]
'name': 'Pascal'
'patterns': [
  {
    'match': '\\b(?i:(ABSOLUTE|ABSTRACT|ALL|AND|AND_THEN|ARRAY|AS|ASM|ATTRIBUTE|BEGIN|BINDABLE|CASE|CLASS|CONST|CONTAINS|DEFAULT|DIV|DO|DO|ELSE|END|EXCEPT|EXPORT|EXPORTS|EXTERNAL|FAR|FILE|FINALIZATION|FINALLY|FOR|FORWARD|GENERIC|GOTO|IF|IMPLEMENTATION|IMPLEMENTS|IMPORT|IN|INDEX|INHERITED|INITIALIZATION|INTERFACE|INTERRUPT|IS|LABEL|LIBRARY|MOD|MODULE|NAME|NEAR|NIL|NOT|OBJECT|OF|ONLY|OPERATOR|OR|OR_ELSE|OTHERWISE|OVERRIDE|PACKAGE|PACKED|POW|PRIVATE|PROGRAM|PROPERTY|PROTECTED|PUBLIC|PUBLISHED|QUALIFIED|RAISE|READ|READLN|RECORD|REPEAT|RESIDENT|REQUIRES|RESOURCESTRING|RESTRICTED|SEGMENT|SET|SHL|SHR|SPECIALIZE|STORED|THEN|THREADVAR|TO|DOWNTO|TRY|TYPE|UNIT|UNTIL|USES|VALUE|VAR|VIEW|VIRTUAL|DYNAMIC|OVERLOAD|REINTRODUCE|WHILE|WITH|WRITE|WRITELN|XOR))\\b'
    'name': 'keyword.control.pascal'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.prototype.pascal'
      '2':
        'name': 'entity.name.function.prototype.pascal'
    'match': '\\b(?i:(FUNCTION|PROCEDURE|CONSTRUCTOR|DESTRUCTOR))\\b\\s+(\\w+(\\.\\w+)?)(\\(.*?\\))?;\\s*(?=(?i:ATTRIBUTE|FORWARD|EXTERNAL))'
    'name': 'meta.function.prototype.pascal'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.function.pascal'
      '2':
        'name': 'entity.name.function.pascal'
    'match': '\\b(?i:(FUNCTION|PROCEDURE|CONSTRUCTOR|DESTRUCTOR))\\b\\s+(\\w+(\\.\\w+)?)'
    'name': 'meta.function.pascal'
  }
  {
    'match': '\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
    'name': 'constant.numeric.pascal'
  }
  {
    'begin': '(^[ \\t]+)?(?=--)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.pascal'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '--'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.pascal'
        'end': '\\n'
        'name': 'comment.line.double-dash.pascal.one'
      }
    ]
  }
  {
    'begin': '(^[ \\t]+)?(?=//)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.pascal'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '//'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.pascal'
        'end': '\\n'
        'name': 'comment.line.double-slash.pascal.two'
      }
    ]
  }
  {
    'begin': '\\(\\*'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.pascal'
    'end': '\\*\\)'
    'name': 'comment.block.pascal.one'
  }
  {
    'begin': '\\{'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.pascal'
    'end': '\\}'
    'name': 'comment.block.pascal.two'
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.pascal'
    'comment': 'Double quoted strings are an extension and (generally) support C-style escape sequences.'
    'end': '("|\\n)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.pascal'
    'name': 'string.quoted.double.pascal'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.pascal'
      }
    ]
  }
  {
    'applyEndPatternLast': 1
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.pascal'
    'end': '(\'|\\n)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.pascal'
    'name': 'string.quoted.single.pascal'
    'patterns': [
      {
        'match': '\'\''
        'name': 'constant.character.escape.apostrophe.pascal'
      }
    ]
  }
]
'scopeName': 'source.pascal'
